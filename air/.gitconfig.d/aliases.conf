[alias]
	abort = "!if test -f .git/MERGE_HEAD; then git merge --abort; elif test -f .git/REBASE_HEAD; then git rebase --abort; elif test -f .git/CHERRY_PICK_HEAD; then git cherry-pick --abort; fi"
	amend = commit --amend

	branches = branch -a

	changed = diff --name-only
	continue = "!if test -f .git/MERGE_HEAD; then git merge --continue; elif test -f .git/REBASE_HEAD; then git rebase --continue; elif test -f .git/CHERRY_PICK_HEAD; then git cherry-pick --continue; fi"
	create = switch --create

	delete = branch --delete --force
	diffhead = "!f() { git diff HEAD~$1; }; f"

	empty = commit --allow-empty-message -m ''

	forcepush = push --force-with-lease

	graph = log --graph --all --decorate --oneline

	hardreset = "!f() { git reset --hard HEAD~$1; }; f"

	last = log -1 HEAD --stat

	name = branch --show-current

	oneline = log --pretty=oneline
	outgoing = log origin/$(git name)..HEAD

	pick = cherry-pick
	pop = stash pop
	pub = publish
	publish = !git push -u origin $(git name)

	refresh = !git pull origin $(git name)
	remotes = remote -v

	savepoint = commit -a --allow-empty-message -m ''
	search = !git rev-list --all | xargs git grep -F
	staged = diff --staged --name-only
	stashes = stash list

	tags = tag
	track = add -N

	uncommit = "!f() { git reset --mixed HEAD~$1; }; f"
	unpublish = push origin --delete
	unstage = reset HEAD --
	untrack = rm --cached
	up = !git fetch && git rebase --autostash FETCH_HEAD

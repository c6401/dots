[user]
	email = nc6401+gthb@gmail.com
	name = c6401
[core]
	eol = lf
	excludesFile = ~/.gitignore
	editor = vim
[alias]
	abort = "!if test -f .git/MERGE_HEAD; then git merge --abort; elif test -f .git/REBASE_HEAD; then git rebase --abort; elif test -f .git/CHERRY_PICK_HEAD; then git cherry-pick --abort; fi"

	amend = commit --amend

	# unfold things like 'git b rm test' to 'git branch-rm test' (then to 'git branch -D test')
	branch = "!f() { if [ $1 ]; then command=$1; shift; git branch-$command $@; else git branch-name; fi; }; f"
	branches = branch -a
	branch-name = rev-parse --abbrev-ref HEAD
	branch-remove = branch -D
	branch-rm = branch-remove
	branch-make = checkout -b
	branch-mk = branch-make

	changed = diff --name-only

	oneline = log --pretty=oneline

	continue = "!if test -f .git/MERGE_HEAD; then git merge --continue; elif test -f .git/REBASE_HEAD; then git rebase --continue; elif test -f .git/CHERRY_PICK_HEAD; then git cherry-pick --continue; fi"

	diffhead = "!f() { git diff HEAD~$1; }; f"

	forcepush = push --force-with-lease

	graph = log --graph --all --decorate --oneline

	hardreset = "!f() { git reset --hard HEAD~$1; }; f"

	last = log -1 HEAD --stat

	pick = cherry-pick
	pop = stash pop
	publish = !git push -u origin $(git branch-name)
	pub = publish

	refresh = !git pull origin $(git branch-name)
	remotes = remote -v

	untitled = commit --allow-empty-message -m ''

	savepoint = !git add -u && git commit --allow-empty-message -m ''
	search = !git rev-list --all | xargs git grep -F
	sp = savepoint
	st = status
	staged = diff --staged --name-only
	stashes = stash list
	syncsave = !git savepoint && linearize && git push
	sw = switch

	tags = tag
	track = add -N

	uc = uncommit
	uncommit = "!f() { git reset --mixed HEAD~$1; }; f"
	unpublish = push origin --delete
	unstage = reset HEAD --
	unstashed = diff --name-only
	untrack = rm --cached
	up = !git fetch && git rebase --autostash FETCH_HEAD

[merge]
	conflictstyle = diff3
[rebase]
	autoStash = true
[init]
	defaultBranch = main
